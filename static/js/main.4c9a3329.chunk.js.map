{"version":3,"sources":["components/AddTodo.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","handleChange","addTodoItem","value","className","type","placeholder","aria-label","aria-describedby","onChange","id","onClick","Todo","todo","makeComplete","deleteItem","map","item","key","style","complete","textDecoration","title","App","useState","isHome","setIsHome","todoInput","setTodoInput","setTodo","Fragment","cursor","e","target","uuid","length","newTodo","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNA+BeA,MA7Bf,YAAqD,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,MAC5C,OACG,yBAAKC,UAAU,YACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,oBACX,2BACIC,KAAK,OACLD,UAAU,eACVE,YAAY,cACZC,aAAW,WACXC,mBAAiB,gBACjBC,SAAUR,EACVE,MAAOA,IAEX,yBAAKC,UAAU,sBACX,4BACIA,UAAU,0BACVC,KAAK,SACLK,GAAG,gBACHC,QAAST,GAJb,iBCULU,MAzBf,YAAiD,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,WAE/B,OACI,yBAAKX,UAAU,YACX,yBAAKA,UAAU,gCACf,wBAAIA,UAAU,cACRS,EAAKG,IAAK,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,EAAKP,GAAIS,OAAwB,IAAhBF,EAAKG,SAAkB,CAAEC,eAAgB,gBAAmB,GAAMjB,UAAU,mBAAtG,IAA2Ha,EAAKK,MAC5H,4BACIlB,UAAU,yCACVO,QAAU,kBAAKI,EAAWE,EAAKP,MAFnC,WAKA,4BACIN,WAA4B,IAAhBa,EAAKG,SAAkB,uCAAyC,qCAC5ET,QAAS,kBAAMG,EAAaG,EAAKP,MAFrC,KAGoB,IAAhBO,EAAKG,SAAkB,aAAe,WAH1C,Y,sBC4DTG,MArEf,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGWJ,mBAAS,IAHpB,mBAGNX,EAHM,KAGAgB,EAHA,KA0Cb,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAK1B,UAAU,aACb,wBAAIA,UAAU,sCAAd,gDAES,IAATqB,EACA,wBAAIrB,UAAU,oBAAd,8CAA8E,IAC9E,0BACEA,UAAU,eACVe,MAAQ,CAACY,OAAQ,WACjBpB,QA/CgB,WACtBe,GAAU,KA2CN,eASA,kBAAC,EAAD,CACEzB,aAlDa,SAAC+B,GACpBJ,EAAaI,EAAEC,OAAO9B,QAkDhBD,YA/CY,WAClB,IAAIQ,EAAKwB,MACGP,GAQVE,EAAQ,CANI,CACZnB,KACAY,MAJUK,EAKVP,UAJa,IAON,mBAAcP,KAEvBe,EAAa,KAoCPzB,MAAOwB,IAES,IAAhBd,EAAKsB,OAAe,kBAAC,EAAD,CAAMtB,KAAMA,EAAMC,aApCzB,SAACJ,GACpB,IAAI0B,EAAUvB,EAAKG,IAAK,SAAAC,GAIpB,OAHGA,EAAKP,KAAOA,IACbO,EAAKG,UAAYH,EAAKG,UAEjBH,IAEXY,EAAQ,YAAIO,KA6B4DrB,WA1BvD,SAACL,GAClB,IAAI0B,EAAUvB,EAAKwB,OAAQ,SAAApB,GAAI,OAAIA,EAAKP,KAAOA,IAC/CmB,EAAQ,YAAIO,OAwByF,qCCzDrFE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4c9a3329.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AddTodo({handleChange, addTodoItem, value}){\r\n return(\r\n    <div className=\"row mt-1\">\r\n        <div className=\"col-sm-8 sm-offset-2 mx-auto\">\r\n            <div className=\"input-group mt-3\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Add todo...\" \r\n                    aria-label=\"Add todo\" \r\n                    aria-describedby=\"button-addon2\"\r\n                    onChange={handleChange} \r\n                    value={value}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                    <button \r\n                        className=\"btn btn-outline-primary\" \r\n                        type=\"button\" \r\n                        id=\"button-addon2\"\r\n                        onClick={addTodoItem}\r\n                    >Add Todo\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n );\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\n\r\nfunction Todo({todo, makeComplete, deleteItem}) {\r\n\r\n    return (\r\n        <div className=\"row mt-5\"> \r\n            <div className=\"col-sm-8 sm-offset-2 mx-auto\">\r\n            <ul className=\"list-group\">\r\n                { todo.map( item => (\r\n                    <li key={item.id} style={ item.complete===true ? { textDecoration: 'line-through' } : { } } className=\"list-group-item\"> { item.title } \r\n                        <button \r\n                            className=\"btn btn-danger btn-sm float-right ml-2\"\r\n                            onClick={ ()=> deleteItem(item.id) }\r\n                        > Delete \r\n                        </button>\r\n                        <button \r\n                            className={ item.complete===true ? \"btn btn-secondary btn-sm float-right\" : \"btn btn-success btn-sm float-right\"}\r\n                            onClick={() => makeComplete(item.id)}\r\n                        > { item.complete===true ? 'Incomplete' : 'Complete' } </button>\r\n                    </li> \r\n                ))  }\r\n            </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\nimport AddTodo from './components/AddTodo';\nimport Todo from './components/Todo';\nimport uuid from 'uuid/v4';\nimport './App.css';\n\nfunction App() {\n  const [isHome, setIsHome] = useState(true);\n  const [todoInput, setTodoInput] = useState('');\n  const [todo, setTodo] = useState([]);\n\n  const displayInputBox = () => {\n    setIsHome(false);\n  }\n\n  const handleChange = (e) => {\n    setTodoInput(e.target.value);\n  }\n\n  const addTodoItem = () => {\n    let id = uuid();\n    let title = todoInput;\n    let complete = false;\n    let newTodo = {\n      id,\n      title,\n      complete\n    }\n    if(title){\n      setTodo([newTodo, ...todo]);\n    }\n    setTodoInput('');\n  }\n  const makeComplete = (id) => {\n    let newTodo = todo.map( item => {\n        if(item.id === id){\n          item.complete = !item.complete\n        }\n        return item;\n    });\n    setTodo([...newTodo]);\n  }\n\n  const deleteItem = (id) => {\n    let newTodo = todo.filter( item => item.id !== id );\n    setTodo([...newTodo]);\n  }\n\n  return (\n    <React.Fragment> \n      <div className=\"container\">\n        <h1 className=\"text-success mt-2 mb-2 text-center\"> Simple TODO App with React and Bootstrap </h1>\n      </div>\n      { isHome===true ? (\n        <h6 className=\"text-center mt-5\"> There is no Todo List. To add todo please { ' '}\n        <span \n          className=\"text-primary\"\n          style={ {cursor: 'pointer'} }\n          onClick={displayInputBox}\n        > \n          Click Here \n        </span>\n        \n        </h6>) : \n        <AddTodo \n          handleChange={handleChange}\n          addTodoItem={addTodoItem}\n          value={todoInput} \n        /> }\n        { todo.length !== 0 ? <Todo todo={todo} makeComplete={makeComplete} deleteItem={deleteItem} /> : <span> </span> }\n    </React.Fragment>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}